{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "from sympy import *\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "init_printing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEYAAAAXCAYAAAC2/DnWAAAABHNCSVQICAgIfAhkiAAAAqRJREFUWIXtmE1sTFEUx39T0XSMpCqRVEMj0ZRuNEI1ErXqSmIjLCoiqNioBd1UN7qqj7CQCMFmdEN9hLCRiU1F4zOx8LUiShh0USGM71qcU2/em/s+dLw3TzL/zeu953/O/ffec8+9d6CMv8IA8A5IlVpIyFgCjAOdQchLgV/ArjAVxQgXgSww3Y+YAd4DybAVxQTLkKzp9SI1ItlyIgpFMcITYASYMtFR4SBsARLAoME5g8zsGkd/Akirbd8/EjpZdKuObhf7AuArcN3RfwaoB9rdAt8DfmAuus3AT+AxeTMLHFIxcciyVkTLORd7Bvn/Fjn629XvoMkppU4PPAZOa4BN2u7V9iCF2VcKTAU+Ay8MtnWI1sMGW7Xa7piCNqox4zHwHCAHPAe6lH8VqAymOxIMIbrq8vpSwEvgLTIJJuSANybDcqzV98Je5Y0Dw8C0wJKjQT+FtXA/9kw34RWyYwB7+uf0W+Uz8Gje351I6sYJw/pt1e9CYCdwEzjl4ZfEmgMb6pBZveHh3IEc51nlHguuNzLUIBqHtH0NOTQWe/hUqM9TkzGBPANGTUZgFfANKc6zkLP/O7IiccMj4BOwHlnAoz78JuVdcCOcV0KDo38FsmWeAbO1b61yL7nESuO/r8PCcR37I7LQM334m5Xf5UboUML2vL5m5ImQBeY7+HeV32aINaC2DT6iwsBGrANiawD+aaTwznUjVCJH1m1tN2h7jMJLEVgXo1sG233gA7Lno0Yb1r0k4cOtRoquW+b/wW4N6lWs/DADKXgHiohRDC7r+C0BuDtwz3obqpAH1ZUihK0GvgC1RcSYLCYK7pEA3CTwGqmtgbAS2MP/80NVPdADnEQeiQ8JdvFsAvqAeWEJKzW2IVkyBpzF/hwoo4wySoffgxGdQ8lbJKQAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left ( x, \\quad y\\right )$$"
      ],
      "text/plain": [
       "(x, y)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var (\"x y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAbAAAAAaCAYAAADWvgkWAAAABHNCSVQICAgIfAhkiAAACJZJREFUeJztnHusHUUdxz+FgpQ3ohYID8MlWqBYNIgIFKSYkBhRRA2RAF3S4iPKwyBBSAgnRoRqQQrlZUHqIzEQFRR5UxChYGjTguUhj5aVmj4o9EEREIHrH7/Z3L17Z/bszM6ePbf8PsnJOWdnZ3b3O9+Z2ZmdWVAURVEU5X3BecAC4DVgDXAbMLHVM1IUZTSgdYfSOncDpyLGOwC4BVgFfLDNk1IUpe/RukPpO7YF3gWObftEFEUZVWjdUZPNGkhzd+CXwArgv0AKXA7s5JHGzsB05A7lBeBNYAPwMDAN93mnwKDjs8rrKqqznTmftQ2l34229E7pvdZtMwOYByxHNFoLLAYuRDR0EZJHMfK1bWJdg6/uCW5vZp93C3HSkn03tbojtH4tcjJDGk137NOoj8fESCTHAPAI8BHgT8A/gYOBo4BngcOAVyuk823gGmAl8ADwEjAeOB7YAfgD8HVEuDwpsCMiUJHXgZk+F1ORm4CPAQcxslA0TZt6p/Re67Z5G1gEPA28DGwDHILk/Qrze3khTkgexcrXNol5Db66Hwgc50hrMjAFuB34Ym57yvun7gitX/PsASwBNkd6kqcB1xf2GXU+vhu56NML2y8z26+tmM4UpFtdvBPYBRF7EPiqJV5qPr3iZ4gJ9unhMfO0qXdKb7WORYJcz+cC4m7l2H6RSfNqS1hIHsXK1zaJeQ0hurt41MT5UmF7yuiqOxLCfRxav2aMAe4DliLX4eqBjSof742c1IuMFGY75C7mP8jdUx3ON8e50hKW4m/Ce0x6xxe2jwHmmrBLLPEuBVYD+3keLxZt653SrNZnm/9nO9L6ODIk8TfPc0gIL/guJpk07y1sD8mjkDihHm6KXnnTpbuLiWb/fyM9hzwpfn6u488YdUdCfB9Def2acSbwHnAE0MHegIV4wFvTmM/Appjve5CLy7MRmA9sjXT36/A/8/2OI/wDwElIRpyJdFeLZs1zDnK+Py7sNxOYCswBfliIc4U5xlHIsEYb9IPeTWr9sPl2nf+VJo3vlZ9+T8gewv+jsD0kj0LihHi4SXrlTZfuLr5lvm/APmTn4+dQf/ZD3VFGt/p1X+RmaBblN48hHmi1zGddSVfrOduEf6fGMcYi466DwDGW8BT7Q9hlwJEl6c41+yXmf3YXchMjG/mrkXUcU5Aud/bZ1u9SatO23inNar0F8AYypFEkG5+fVfE68iTUv3P9AXLn+XPgIZPeE8CHC/uF5FFovs6luoebpilvVtXdxjhgHdJw7WEJT/Hzc4g/Y9YdCfF7YN3q17HAQuT51TizrYO9BxbigabKfCV+QflslGy8+rwax5hp0rjdEX4hYo7xSOs+ERlnfQ8RZpIj3u7ITJwUad0HgbuALS37umYqdTyvpS5t690LrR804bvltm2DPLBfjTxw9iWhfsFfxfC8vxPRoUhIHoXmq4+uTdOUN6vqbmOqifMXR3iIn339GbPuSIjfgHWrX3+E3AB8Nretgz2vQz1Qq8ynuEW2fX7rccI/MeGhQxlnmPjP4L/wL8uYW0r2uZih68q6tzFJCdfWRr/qHVPr7Bryz3ZmMLynUUaKn+ZzK6SZZzzwFeSOdAXwqUJ4SB7VyddQD6f46dS2N7vpbmO+OabvmqsyP9f1Z1VSmvUxdC/vByPDij8tbO8Q1oC5POCl6djC/6XAW44D2liR+73BfLtayO0L+/nwXaTr+DRwNP7rJq5FurJHlOyzJvd7GnLXFZM62troV71jaj3ffH8G+CMwAfg+MpPsVxXO5XJkanSeA4Evm/hpIezxCmnmWY1UbIuA54BfM/zVQCF5VCdfQz08mrwJ3XUvsh9wKDJ54w7PY5X5ua4/q9K0j7uV97HAbxCtL6iYZqgHeqXpCKYjreR1jvBsSuXRnumeZeItQdYThLC9ScNVSL+BDBWsNPtdE3icXtKvesfUeiez74Pm/33IEMYnA84rIyH+0AvIwtpB4EO5bSF5FJqv/eThprxpw6Z7kVmED9WV+bkJf1YlIY6Pq5T3Hane+8vW0YV6oDVNB8wJvYh72uQb+E2dPdekuZhyg3bjGJOObdbPF5CFkkuQh8HPIDNxJtQ4Xi/oV71ja/0UMt32RJOuz5ofGwnNNGCrTbr5NwyE5FFInH7zcBPedGHTPc9WSI/CNXmjG2V+hvj+rEpCfR9XLe/jkEXKts8ik8ZD5v8JJk4dD7SladDCtQGkoG1R2H6BibOQas9g9nfstxfwvEnr/ELY4YiIy4BdzbavmX1vrXDMtvHV26U1+OndS62vM/tsRIbI6r74NCGs4E9AZowV2YyhB9LzLeFNL2TuVw/HqgtCdc/IXnd0W8k+IX7OiO3PqiTUa8B861cXHdzPukIXMrelKQMM3RHdijxUvt/8fxb7e8tSE/7R3LapZts7yJTZjuWTFNLpIN38O5EWewbwe2Rm1iAysyY/I2sSsB4ZchkopLXAxJlccq39gK/eKSO1Bn+9O/RO61MYGp5wPRD2ISGs4J+F9GrmIQ+oL0be8bbUpLcS+8LUkDJRNU4/ezhWXRCqe0Y23b5s8kYHPz/nie3PqiSEN2Ah9auLDu5rD/EAtKcpIN30GxFjvQ38CxmDdrWiKSNN26H7WOtfC+kcCfwOed/WesT0a5BV+qcw/L2P+yBTctcBn7Cc0+fNMf5ecp39go/eKfYGrIOf3r3UerIJf4w47+5MCCv4E4GrkAfkryCFfwPSUHQov0v0LRNV4owGD8eoC+rovq9JbznlC+x9/Fwktj+rkhDegHXwr1+7peVqaEK835amihKdPyPPLz7d9okoigX1Z3xUU2WTIHuIO7vtE1EUC+rP+KimyqhmT2Rx4xzkxZ1PEn9RuaKEov6Mj2qqbDJ8E7kDWwfczPBXyihK26g/46OaKoqiKIqiKIqiKIqiKIqiKIqiKIrh/y0S81/v87tsAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$- 0.25 x^{2} - 0.25 x y + 300 x - 0.375 y^{2} + 240 y$$"
      ],
      "text/plain": [
       "        2                             2        \n",
       "- 0.25⋅x  - 0.25⋅x⋅y + 300⋅x - 0.375⋅y  + 240⋅y"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f = -1/4*x**2 - 3/8*y**2 - 1/4*x*y + 300*x + 240*y\n",
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = 180*x + 140*y + 5000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left ( - 0.5 x - 0.25 y + 300, \\quad - 0.25 x - 0.75 y + 240, \\quad \\left \\{ x : 528.0, \\quad y : 144.0\\right \\}\\right )$$"
      ],
      "text/plain": [
       "(-0.5⋅x - 0.25⋅y + 300, -0.25⋅x - 0.75⋅y + 240, {x: 528.0, y: 144.0})"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfx=f.diff(x)\n",
    "dfy=f.diff(y)\n",
    "pc=solve([dfx,dfy],[x,y])\n",
    "\n",
    "dfx,dfy,pc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKAAAAAVCAYAAADByOXrAAAABHNCSVQICAgIfAhkiAAABL5JREFUaIHt2muoVFUUB/CfZubF7JqaGaVZliQZIYVooZJlQuGXIiiQMvRDYUYP6GFFFwork0qSMj9UiBChotJDVMqSrJQgeuCjh05F3rJM7WWlZh/2njjOPWfm3HHyPpo/HDaz/2uvvfZa+7HOPkMddbRDLMRO9GxrQ+roFLgAhzA1j/CF+Bt3pHCn4XnswJ8o4CmcWKVhY7AUzVFfM1bjihK5vpiGZfgC+7AX7wiD6pqhvyAMPO35rkqbOzJqFb+C1vt1mRDf45OVXVIEV2MkThECXcQQvIv+WIEtUe4SbMXF2NWKQdyPh/AjXo3G9cMIrMVdCdmb8GyUWYuvcTKuQqMwia8RHJBEAb0FJ5fiV8xphb0dHbWMX0Hr/ToSG3AfZmUpHirsfgtSuFVCgGeU1D8R6+dXMDqJ4mRZg14p/LElv8djkpY73QBhMh7C1Sl6CvGpo7bxK6jOr5vxFY7JEng0GnNpSf2ZsX67lpOglzDrf5MvZ+yKbVH+pDxWV8DMaNvTKVxBfQJS2/hRvV8fjHZMLFZ0KxG4DAfxfkn9+FiuFnbIJH7BelyOUXijghEX4QwswW5cieH4AxvxXuVxHIb9sTyQwR+HyRgkOPljrBPG+X9BLeNXRDV+XR/LCcKOfBh6CkH8JKXh48LMvTND8bzI35zD8Nuj7LxodGkS+7b8O2O3aO9hqyqBQor+Q8IOPC5nH50BtYwf1fu1McptLFYkt+NThbO5OaMh4c0zDcX63uXtRkiCCS8WDcKu20vYBVdhLBbn0ENIGYbjdSkrCi8I6cQAYYGdh+cwGCtxfs5+OjpqGT+q9+te4aQblEaOFmbnyyncgshNy1A8K/L35DB+dpQ9mGJoA76J/OgKem6NcpvRJ0e/ScyJbZe1st3RQkH2NUfas6iCvlrGrxzy+PVbiXQpmQMWr1x6pDQqrpDGFA5OKJErh92x3IaPSrh9wk42VXhtz8oHp2MuNgkr8acc/SYxXziOxray3dHCl8JOkRc7KvC1jF855PFrg8T1XnIC7oxl35RGW2M5NEPp2bH8rLKN/+rak8EXJ2hDBn8bnsSnwuTbmSFXDsU27fVLT+ktxJGilvErh0p+7Soc89vTyC5RwQ8p3BCVX+N/L9NxEv2EN9c96J7Cr4x9XZvC3R25D6OeajEx6tl0BDo6EmoZv3Ko5NdhkV+apWBJFDgrhavmInMIztHyYnlRbPNwSf0E4Zpgj5YJ8QOxzQfy5XznZsidjs+jrpkp/IuRm5Kjj46EWsWvWr/CjZG/JcvI66LA9Axjvo/8cjyCN+PvrdKP7kLkB5fU908Yu05IXhcLyel+4UtJEjdE2QPC8duU8kwpadMk5FEr8QweExbYvqjrNek78MLIT07hOjJqFb8m1fkVXhJiODDLyO7Cx+QNGfxA4RW8GX8Jn1Xmyt6R0gZQRB9h9W2PunYJ3yhHpcg2qfwm+FZJm3HCgLcIO+p+Ib1Yg+ulfwcnHO8/q/4PFu0ZtYhftX5tFCbp8kpG3hs7HVFJsBOit3A9NLutDemEmCHMqzGVBHsIK+OV/9qidohJwvEyoK0N6WRoEK6KluRtMFb4cNxerynq6FgYJqRRg9vWjDrqqKOO9oR/AMutmyKTnLQ6AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left ( 0.625, \\quad -0.5\\right )$$"
      ],
      "text/plain": [
       "(0.625, -0.5)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfxx=dfx.diff(x)\n",
    "dfxy=dfx.diff(y)\n",
    "dfyx=dfy.diff(x)\n",
    "dfyy=dfy.diff(y)\n",
    "\n",
    "D=dfxx*dfyy - dfxy\n",
    "D.subs(pc),dfxx.subs(pc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}-0.5 & -0.25\\\\-0.25 & -0.75\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡-0.5   -0.25⎤\n",
       "⎢            ⎥\n",
       "⎣-0.25  -0.75⎦"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H=hessian(f,[x,y])\n",
    "H"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left \\{ - \\frac{5}{8} - \\frac{\\sqrt{5}}{8} : 1, \\quad - \\frac{5}{8} + \\frac{\\sqrt{5}}{8} : 1\\right \\}$$"
      ],
      "text/plain": [
       "⎧  5   √5       5   √5   ⎫\n",
       "⎨- ─ - ──: 1, - ─ + ──: 1⎬\n",
       "⎩  8   8        8   8    ⎭"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H.eigenvals()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left [ - 0.5 x - 0.25 y + 300, \\quad - 0.25 x - 0.75 y + 240\\right ]$$"
      ],
      "text/plain": [
       "[-0.5⋅x - 0.25⋅y + 300, -0.25⋅x - 0.75⋅y + 240]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nablaf=[f.diff(var) for var in [x,y]]\n",
    "nablaf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAN4AAAAXCAYAAABkgPHLAAAABHNCSVQICAgIfAhkiAAABw1JREFUeJztm3uwVVMcxz83pdFLeRVKhhAZ0VAM1emGiaYRYUb0mNFMDKoRSjOmM0hFwpRHRY5HYybpYTKSBhEazxCVlIMmj0qPi9LTH9+152z77r3PWvfuc2+u/Z05s+9Zv9/6/X57/c5vrd/6rXUhRYoUBx36A8uB7cA+4OzaNSdFioMeWWAP8AswHzjVVcAZwH6gApgJ3Ae0Ss4+Z+SBAxGfXwK8RwJDgHnAd8BONHksA24E6sXo6Q0sBjaYfuuBl4ELqmBzazR2G4G/zTs8CrSogqy6gKuBKcB7wA7kuxcdZQyg4PchJeAPwtWHGWACsMjo/MhV4S2m4zBnU0uDPLANzSjBzx0B3puQ7RuBWcB4NHjbTPscoCxEx0RD3ww8jQZwDrAbTUI3ONh7MvCrkTffyHrLfF+NJof/G1ag968AVuEeeG2QDyuwCyRX/iCq68NP0e+miYvSe4yCSxyNLRXy5mODcqAPlVe2VsCP6L36hdD2odXzmACth+mz3tpaeMP0uS3QPtm0P+Ugq66gB3AKmvQyuAVeGbAEWAc8RPFAcuUPQ3V9OMvwtXFRmjWdMjE8iw3PVYH2MiBnaBNclMYgj33gxWEMsmtKoL2LaV8Q0W8HmjltcJKR9T2Vg78p8AfwJ9DYUl4pMRLZOjKCfhpKsd5NWG8Gt8AbjlaPbhR+m3GB5MofRBI+zBkZJwYJcXsdG9yJXu5+4BBf+yRgEDADGG1h2GBLfQ1RujcGDWyPgF4b7DHPvYH2tSil7AwcFaB1Q4O9xFJHuXkuRuPjRwXwPtAION9SXimxzDyjbJmCxvjWCHoONx9WBaejCfwx7CYAV/4wlNSHcYHX3Dx3xvB8AbyAXnSAaRsD3A7MRnutJNHK6BuHNrhvoYDpbtm/PjDQ/L0oQPsdGAW0BL4BpqO94Ww0+G8CQy31nGae30bQ15qnc8WrBPgM+bhLCO0atNV4HPiyJo3yoT7y+Y/ot5U0fxSS8OEu8zzcVmkZhY1hsUpma+S4PJoVD6Af9aEWeo4F2lsaNhbNQi3RTHMmyrH3A38BHS1kTDL2vRbD0xcFob9quhYdrdhiOvGpzThDv9tBZimxFNlznK+tMfATKi7E+cfFh35ksEs170V7b39VOUv0+LryRyEJH442PMOLKesFPAx8jFsBYDyFH6m3BNcUvGCaV4RvmOFbBRwRwXMXSkEnoxy/EdCJwib7QUubijntAUOPS8NrEp49/r26V+EdXCKdGYoHXmfkj+C4ZwkfX1f+OCThw+PRgrQHZU7jCNnvgdI3L4C+AjpYGnm7r197yz5JoZ3RuyWGxzsa+ZroFTxjeOaG0Bqhc719KCCLwauiRRUsphr6zRayagK9kT0Tzff2aL/7AeHHLkkgQ3zg1QfWoLS/YYCWpXJQuPIXQ1I+HIoyMi8+MlGMzYArUPq4geLFi+tQuvezEfxkEf6k0czo3RVBH0FhIgkeE/jhrZzB0rGHuYQfQ4RhiOGdFkH3VtCeFrJqAi2QD5ea70vQJHNOCXVmiA+85kRfmAh+Hq0CfzEk4UNvQluGFrEGHqF+CPMOVFJ/BbgeFU5WRgi+HHgOrSTlqII0BFWTVscYlCS8XD7sjG0Uqm6tQEWCzTFyvFny6Ai6177bwqa3zfNSVMDyV8WaAheiiW25hayawFaUgp+L9rI90QT6eS3a9DfwTAStE5oUlqFV7sMq8BdDEj70KqNZFCNW8DaP3SLoF6EldD3aYIOuBHmn/Daw3Zh3IHxf1hYVPg5QuYLlXQD4JKJvENdSuH52fIB2GRr4nVS+rXAyeocGgfaqHL7mKH1pPgrTKNwq2YTdmEHpiythyOKWOhbjT9KHfsw0fO0s7QTiD9A7oqs4PyOj/fAKM10tdOSw+6FlUSr5OvAE2ovMQYHgVSn9VdRBpn0v8Ajh18yCOuuhI4MDaNV/zuh5FQVdVHUqT/ghafC60XgK143WEH7d6HlDd7malhQGUkjFXPZCOewni76GP0fhLuM6X9skS51Zkg28PMn50I9chNxYjCU88NqhVWErcFZIv4tNP5s0yjNscBG+7sBLKH3dhqpEm1CgDKRyASBL8Tz/nRA9DdCecDkKvr3Ab8BClHKEIU/04LYBnkUT1G7gB5SGR60mnxu9tXGJuit6j49wK6jksA+8LPE+yVvq9OSUOvDA3Yd+5IzctpZ2AoUziCtdOqWoMpqjgobtkUXSeNXoP6+W9NdFLEAx1NKlUz/TaSGK+upeL0sRjz4ona6Nf73qj3w9tRZ010U0RGeK283HKXYOQyV4fyqQ/iNs3cEJKKuZgSqCK6nZiw91FVn+HTNjw5jCjhM87ETl5XJ0pNCEyv9wmuK/i16oWLANpUQjUJU6RfXwDqoNbEHHFitq1ZoUKVKkSJEiRYoU/zf8A0zIbJXX2f8hAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left \\{ x : 528.0, \\quad y : 144.0\\right \\}$$"
      ],
      "text/plain": [
       "{x: 528.0, y: 144.0}"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pcs=solve(nablaf)\n",
    "pcs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}-0.5 & -0.25\\\\-0.25 & -0.75\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡-0.5   -0.25⎤\n",
       "⎢            ⎥\n",
       "⎣-0.25  -0.75⎦"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H=hessian(f,[x,y])\n",
    "H"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "\nWhen a single argument is passed to subs it should be a dictionary of\nold: new pairs or an iterable of (old, new) tuples.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-52-b50dcddc4596>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mpc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpcs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0meig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mH\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meigenvals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Puntos criticos:\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"sus eigenvalores:\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0meig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/sympy/matrices/common.py\u001b[0m in \u001b[0;36msubs\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1802\u001b[0m         \u001b[0mMatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1803\u001b[0m         \"\"\"\n\u001b[0;32m-> 1804\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapplyfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1805\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1806\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/sympy/matrices/common.py\u001b[0m in \u001b[0;36mapplyfunc\u001b[0;34m(self, f)\u001b[0m\n\u001b[1;32m   1545\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"`f` must be callable.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1546\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1547\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_eval_applyfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1548\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1549\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mas_real_imag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/sympy/matrices/common.py\u001b[0m in \u001b[0;36m_eval_applyfunc\u001b[0;34m(self, f)\u001b[0m\n\u001b[1;32m   1485\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1486\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_eval_applyfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1487\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_new\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrows\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1488\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1489\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/sympy/matrices/common.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1485\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1486\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_eval_applyfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1487\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_new\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrows\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1488\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1489\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/sympy/matrices/common.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m   1802\u001b[0m         \u001b[0mMatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1803\u001b[0m         \"\"\"\n\u001b[0;32m-> 1804\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapplyfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1805\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1806\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/sympy/core/basic.py\u001b[0m in \u001b[0;36msubs\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    851\u001b[0m                    \u001b[0mWhen\u001b[0m \u001b[0ma\u001b[0m \u001b[0msingle\u001b[0m \u001b[0margument\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mpassed\u001b[0m \u001b[0mto\u001b[0m \u001b[0msubs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    852\u001b[0m                    \u001b[0mit\u001b[0m \u001b[0mshould\u001b[0m \u001b[0mbe\u001b[0m \u001b[0ma\u001b[0m \u001b[0mdictionary\u001b[0m \u001b[0mof\u001b[0m \u001b[0mold\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew\u001b[0m \u001b[0mpairs\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0man\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 853\u001b[0;31m                    of (old, new) tuples.\"\"\"))\n\u001b[0m\u001b[1;32m    854\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m             \u001b[0msequence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: \nWhen a single argument is passed to subs it should be a dictionary of\nold: new pairs or an iterable of (old, new) tuples."
     ]
    }
   ],
   "source": [
    "for pc in pcs:\n",
    "    eig = H.subs(pc).eigenvals()\n",
    "    print(\"Puntos criticos:\",pc,\"sus eigenvalores:\",eig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
